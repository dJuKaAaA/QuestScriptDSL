/*
 * generated by Xtext 2.27.0
 */
package com.ftn.siit.domj.validation;

import org.eclipse.xtext.validation.Check;

import com.ftn.siit.domj.questScript.Item;
import com.ftn.siit.domj.questScript.QuestScriptPackage;
import com.ftn.siit.domj.questScript.Requirement;
import com.ftn.siit.domj.questScript.Reward;
import com.ftn.siit.domj.questScript.RewardType;
import com.ftn.siit.domj.questScript.Task;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class QuestScriptValidator extends AbstractQuestScriptValidator {
	
	@Check
	public void checkTaskHasPurpose(Task task) {
		if ((task.getFind() == null || task.getFind().isBlank())
				&& (task.getDefeat() == null || task.getDefeat().isBlank())
				&& (task.getCollect() == null || task.getCollect().isBlank())
				&& task.getTalkTo() == null) {
			error("A task must have at least one of the following: find, defeat, collect, talk to", QuestScriptPackage.Literals.TASK__NAME);
		}
	}
	
	@Check
	public void checkTypeOfReward(Reward reward) {
		if (reward.getType() == RewardType.ITEM && reward.getItem() == null) {
			error("An item reward type should contain an item", QuestScriptPackage.Literals.REWARD__TYPE);
		}
	}
	
	@Check
	public void checkMoneyRewardIsNotZero(Reward reward) {
		if (reward.getType() == RewardType.MONEY && reward.getMoneyAmount() <= 0) {
			error("Money amount must be greater than 0", QuestScriptPackage.Literals.REWARD__TYPE);	
		}
	}
	
	@Check
	public void checkXPNotNegative(Reward reward) {
		if (reward.getXp() < 0) {
			error("XP gained cannot be a negative number", QuestScriptPackage.Literals.REWARD__XP);
		}
	}
	
	@Check
	public void checkMinLevelAmount(Requirement requirement) {
		if (requirement.getMinLevel() < 1) {
			error("Minimum level cannot be lesser than 1", QuestScriptPackage.Literals.REQUIREMENT__MIN_LEVEL);
		}
	}
	
}
