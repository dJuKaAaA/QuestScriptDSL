/*
 * generated by Xtext 2.27.0
 */
package com.ftn.siit.domj.generator

import com.ftn.siit.domj.questScript.Item
import com.ftn.siit.domj.questScript.Location
import com.ftn.siit.domj.questScript.Model
import com.ftn.siit.domj.questScript.NPC
import com.ftn.siit.domj.questScript.Quest
import com.ftn.siit.domj.questScript.Requirement
import com.ftn.siit.domj.questScript.Reward
import com.ftn.siit.domj.questScript.Task
import com.google.gson.Gson
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class QuestScriptGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (eObj : resource.contents) {
			if (eObj instanceof Model) {
				val model = eObj as Model
				val jsonContent = generateJson(model)
				fsa.generateFile("model.json", jsonContent)
				fsa.generateFile("item.txt", model.item.join(", "))
				fsa.generateFile("item_parsed.txt", model.item.map[toJson(it)].join(", "))
			}
		}
	}

	def generateJson(Model model) {
	    '{\n' +
	    '\t"locations": [\n' + model.location.map[toJson(it)].join(",\n") + '\n\t],\n' +
	    '\t"npcs": [\n' + model.npc.map[toJson(it)].join(",\n") + '\n\t],\n' +
	    '\t"items": [\n' + model.item.map[toJson(it)].join(",\n") + '\n\t],\n' +
	    '\t"tasks": [\n' + model.task.map[toJson(it)].join(",\n") + '\n\t],\n' +
	    '\t"rewards": [\n' + model.reward.map[toJson(it)].join(",\n") + '\n\t],\n' +
	    '\t"requirements": [\n' + model.requirement.map[toJson(it)].join(",\n") + '\n\t],\n' +
	    '\t"quests": [\n' + model.quest.map[toJson(it)].join(",\n") + '\n\t]\n' +
	    '}\n'
	}


	def toJson(Location l) {
	    '{\n' +
	    '\t"name": "' + l.name + '",\n' +
	    '\t"x": ' + l.x + ',\n' +
	    '\t"y": ' + l.y + '\n' +
	    '}'
	}

	def toJson(NPC n) {
	    '{\n' +
	    '\t"name": "' + n.name + '",\n' +
	    '\t"location": "' + (n.location?.name ?: "") + '",\n' +
	    '\t"dialog": "' + n.dialog + '"\n' +
	    '}'
	}
	
	def toJson(Item i) {
	    '{\n' +
	    '\t"name": "' + i.name + '",\n' +
	    '\t"type": "' + i.type + '",\n' +
	    '\t"description": "' + i.description + '"\n' +
	    '}'
	}
	
	def toJson(Task t) {
	    '{\n' +
	    '\t"name": "' + t.name + '",\n' +
	    '\t"find": "' + (t.find ?: "") + '",\n' +
	    '\t"defeat": "' + (t.defeat ?: "") + '",\n' +
	    '\t"collect": "' + (t.collect ?: "") + '",\n' +
	    '\t"talkTo": "' + (t.talkTo?.name ?: "") + '"\n' +
	    '}'
	}
	
	def toJson(Reward r) {
	    '{\n' +
	    '\t"name": "' + r.name + '",\n' +
	    '\t"xp": ' + r.xp + ',\n' +
	    '\t"type": "' + r.type + '",\n' +
	    '\t"item": "' + (r.item?.name ?: "") + '",\n' +
	    '\t"moneyAmount": ' + r.moneyAmount + '\n' +
	    '}'
	}
	
	def toJson(Requirement req) {
	    '{\n' +
	    '\t"name": "' + req.name + '",\n' +
	    '\t"minLevel": ' + req.minLevel + ',\n' +
	    '\t"completed": "' + (req.completed?.name ?: "") + '"\n' +
	    '}'
	}
	
	def toJson(Quest q) {
	    '{\n' +
	    '\t"name": "' + q.name + '",\n' +
	    '\t"type": "' + q.type + '",\n' +
	    '\t"giver": "' + (q.giver?.name ?: "") + '",\n' +
	    '\t"description": "' + q.description + '",\n' +
	    '\t"task": "' + (q.task?.name ?: "") + '",\n' +
	    '\t"requirement": "' + (q.requirement?.name ?: "") + '",\n' +
	    '\t"reward": "' + (q.reward?.name ?: "") + '"\n' +
	    '}'
	}

}
